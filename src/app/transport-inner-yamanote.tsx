import { MouseEventHandler } from "preact/compat";
import { useCallback, useEffect, useRef, useState } from "preact/hooks";
import { BaseLayout } from "components/layout";
import { AppModuleMeta } from "lib/const";

export const meta: AppModuleMeta = {
	hasCSS: true,
	title: "山手線内運賃表",
	description: "東京山手線内相互の運賃表(券売機の上に掲示されているやつ)を自動生成"
};

export const App = () => (
	<BaseLayout scope="transport-inner-yamanote" isCentering={true}>
		<h1>山手線内運賃表</h1>
		<p>2023/03/18 改定 IC運賃</p>
		<div><Canvas /></div>

		<h2>ご注意</h2>
		<ul>
			<li>営業キロベースで独自に計算しているため、<em><strong>内容の正確性については保証しません</strong></em>。実際のご利用の際には、必ず信憑性のあるデータを合わせてご確認ください。</li>
		</ul>

		<h2>データ出典</h2>
		<ul>
			<li>運賃データ</li>
			<ul>
				<li><a href="https://www.jreast.co.jp/unchin-kaitei/pdf/yamate_normal.pdf" target="_blank" rel="noopener noreferrer">山手線内の普通運賃表</a></li>
			</ul>
			<li>路線図データ</li>
			<ul>
				<li><a href="https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N05-2023.html" target="_blank" rel="noopener noreferrer">国土数値情報 | 鉄道時系列データ</a></li>
			</ul>
			<li>営業キロデータ</li>
			<ul>
				<li><a href="https://ja.wikipedia.org/wiki/山手線" target="_blank" rel="noopener noreferrer">山手線 - Wikipedia</a></li>
				<li><a href="https://ja.wikipedia.org/wiki/中央線快速" target="_blank" rel="noopener noreferrer">中央線快速 - Wikipedia</a></li>
				<li><a href="https://ja.wikipedia.org/wiki/中央・総武緩行線" target="_blank" rel="noopener noreferrer">中央・総武緩行線 - Wikipedia</a></li>
			</ul>
		</ul>
	</BaseLayout>
);

const colorThemeMediaQuery = "(prefers-color-scheme: dark)";
const Canvas = () => {
	const canvasRef = useRef<HTMLCanvasElement>(null);
	const [station, setStation] = useState(440101);
	const [isDarkMode, setDarkMode] = useState(window.matchMedia(colorThemeMediaQuery).matches);

	const themeChangeEvent = useCallback((e: MediaQueryListEvent) => {
		setDarkMode(e.matches);
	}, []);

	useEffect(() => {
		if (!canvasRef.current) return;
		window.matchMedia(colorThemeMediaQuery).addEventListener("change", themeChangeEvent);
		render(canvasRef.current, station);
		return () => window.matchMedia(colorThemeMediaQuery).removeEventListener("change", themeChangeEvent);
	}, [canvasRef]);

	useEffect(() => {
		if (!canvasRef.current) return;
		render(canvasRef.current, station);
	}, [station, isDarkMode]);

	const clickEvent: MouseEventHandler<HTMLCanvasElement> = useCallback((e) => {
		const code = getClickedStation(e);
		if (code) setStation(code);
	}, []);

	return (
		<canvas ref={canvasRef} onClick={clickEvent} width="700" height="700"></canvas>
	);
};

type Position = [number, number];

interface Line {
	name: string
	geo: Position[]
}
const lines: Line[] = [
	{ name: "東北線", geo: [[139.766685, 35.680965], [139.76716, 35.68228], [139.76764, 35.68359], [139.76849, 35.68586], [139.76933, 35.6881], [139.77054, 35.69096], [139.770875, 35.69177], [139.77121, 35.69258], [139.77159, 35.69345], [139.77185, 35.69403], [139.77229, 35.69494], [139.77268, 35.69586], [139.7728, 35.69635], [139.77292, 35.69772], [139.773045, 35.698535], [139.77317, 35.69935], [139.77333, 35.70053], [139.77343, 35.70134], [139.77351, 35.70165], [139.77355, 35.70174], [139.77374, 35.70223], [139.77388, 35.70261], [139.77401, 35.70307], [139.77407, 35.70334], [139.77435, 35.70497], [139.77457, 35.70632], [139.774715, 35.707195], [139.77486, 35.70807], [139.77494, 35.70854], [139.77495, 35.70874], [139.77495, 35.70897], [139.77493, 35.70911], [139.77474, 35.71056], [139.7747, 35.71095], [139.77474, 35.7112], [139.77482, 35.71152], [139.77487, 35.71163], [139.77507, 35.71205], [139.775855, 35.71322], [139.77664, 35.71439], [139.77764, 35.71551], [139.77847, 35.71646], [139.77936, 35.71756], [139.77962, 35.71797], [139.7797, 35.71829], [139.77976, 35.71871], [139.77972, 35.71905], [139.77958, 35.71951], [139.77936, 35.71998], [139.77916, 35.72034], [139.77865, 35.72085], [139.77803, 35.721455], [139.77741, 35.72206], [139.77564, 35.7237], [139.77543, 35.72391], [139.77509, 35.72423], [139.77477, 35.72454], [139.77399, 35.72524], [139.77347, 35.72566], [139.77309, 35.72595], [139.77274, 35.7262], [139.77227, 35.72647], [139.77188, 35.72667], [139.77145, 35.72691], [139.7712, 35.7271], [139.770971, 35.72727], [139.77093, 35.7273], [139.77037, 35.7278], [139.77016, 35.72798], [139.77015, 35.72799], [139.76956, 35.72853], [139.76898, 35.72917], [139.76818, 35.73012], [139.76744, 35.73108], [139.76729, 35.73127], [139.76678, 35.732083], [139.76675, 35.73213], [139.76656, 35.73241], [139.76626, 35.73289], [139.76619, 35.73301], [139.76602, 35.7332], [139.76551, 35.73384], [139.76514, 35.73426], [139.76477, 35.73462], [139.76439, 35.73497], [139.76419, 35.73515], [139.76342, 35.73584], [139.76257, 35.73661], [139.76248, 35.73669], [139.761575, 35.737475]] },
	{ name: "中央線", geo: [[139.770875, 35.69177], [139.77121, 35.69258], [139.77159, 35.69345], [139.77162, 35.69376], [139.77164, 35.69422], [139.77167, 35.69448], [139.77165, 35.6951], [139.77161, 35.69552], [139.77149, 35.6958], [139.7712, 35.69624], [139.77052, 35.69696], [139.770164, 35.697234], [139.76953, 35.69769], [139.76889, 35.69815], [139.76863, 35.6983], [139.76817, 35.69852], [139.76755, 35.69883], [139.76634, 35.69926], [139.76503, 35.699605], [139.76372, 35.69995], [139.76327, 35.70014], [139.76242, 35.70065], [139.76174, 35.7011], [139.7614, 35.70122], [139.76104, 35.70132], [139.76056, 35.7014], [139.75915, 35.70141], [139.75796, 35.70135], [139.75762, 35.70136], [139.75719, 35.70144], [139.75607, 35.70172], [139.75503, 35.7019], [139.75494, 35.70191], [139.753745, 35.702], [139.75255, 35.70209], [139.75245, 35.7021], [139.75057, 35.70223], [139.74779, 35.70244], [139.74723, 35.70245], [139.74677, 35.70246], [139.74617, 35.70233], [139.74574, 35.70219], [139.74565, 35.70214], [139.74525, 35.70192], [139.74503, 35.70177], [139.744892, 35.701649], [139.74471, 35.70149], [139.74438, 35.70114], [139.74421, 35.70091], [139.7437, 35.70019], [139.74328, 35.69966], [139.74303, 35.6994], [139.74295, 35.69931], [139.74231, 35.69855], [139.74131, 35.69727], [139.74074, 35.69651], [139.74, 35.69555], [139.7394, 35.69465], [139.73891, 35.69401], [139.73857, 35.69358], [139.73814, 35.69309], [139.73765, 35.69267], [139.73705, 35.69221], [139.73667, 35.69194], [139.7363, 35.69175], [139.73593, 35.69152], [139.73532, 35.691155], [139.73471, 35.69079], [139.73348, 35.69011], [139.73255, 35.68956], [139.73207, 35.68919], [139.73179, 35.6889], [139.73161, 35.68864], [139.73149, 35.68841], [139.73135, 35.68807], [139.73087, 35.68661], [139.73078, 35.68637], [139.73063, 35.68594], [139.73053, 35.685653], [139.73032, 35.68505], [139.73021, 35.68469], [139.73019, 35.68466], [139.72981, 35.68406], [139.72971, 35.68396], [139.72908, 35.68336], [139.72863, 35.68296], [139.72846, 35.68282], [139.72845, 35.68281], [139.72786, 35.68232], [139.72738, 35.68189], [139.72701, 35.68169], [139.72408, 35.68044], [139.72309, 35.68004], [139.72258, 35.6799], [139.72241, 35.67987], [139.72185, 35.67988], [139.72112, 35.67994], [139.721099, 35.679942], [139.71979, 35.68006], [139.71889, 35.68021], [139.71476, 35.68077], [139.71408, 35.68086], [139.71355, 35.68092], [139.71279, 35.68101], [139.71153, 35.681196], [139.7113, 35.68123], [139.71027, 35.68138], [139.70951, 35.68153], [139.70845, 35.6815], [139.70801, 35.68148], [139.70709, 35.68144], [139.70664, 35.68142], [139.70584, 35.68136], [139.70538, 35.68138], [139.70521, 35.68141], [139.70486, 35.68147], [139.70429, 35.68164], [139.70394, 35.68179], [139.70342, 35.68207], [139.70318, 35.68225], [139.70294, 35.68245], [139.70275, 35.68262], [139.70239, 35.68309], [139.70221, 35.683795]] },
	{ name: "山手線", geo: [[139.738845, 35.628141], [139.738896, 35.627056], [139.73881, 35.62549], [139.73866, 35.62501], [139.73855, 35.62455], [139.73855, 35.62452], [139.73829, 35.6234], [139.73824, 35.62318], [139.73812, 35.6226], [139.73764, 35.6206], [139.73762, 35.62049], [139.73753, 35.62031], [139.73695, 35.61901], [139.73668, 35.61869], [139.73634, 35.61828], [139.7356, 35.61761], [139.73527, 35.61741], [139.73508, 35.61729], [139.73454, 35.61708], [139.73444, 35.61704], [139.73399, 35.61691], [139.73342, 35.61684], [139.7328, 35.61677], [139.73227, 35.61682], [139.73149, 35.617], [139.73119, 35.61709], [139.73099, 35.61717], [139.73081, 35.61725], [139.73068, 35.61732], [139.7304, 35.61748], [139.73023, 35.6176], [139.73002, 35.61777], [139.72964, 35.61816], [139.7295, 35.6183], [139.72888, 35.61912], [139.728245, 35.619945], [139.72761, 35.62077], [139.72628, 35.62262], [139.72519, 35.62415], [139.72496, 35.62446], [139.72436, 35.62526], [139.72422, 35.62543], [139.72407, 35.62562], [139.723534, 35.626306], [139.72321, 35.62672], [139.72262, 35.62727], [139.72231, 35.62749], [139.72186, 35.6278], [139.7214, 35.62806], [139.72015, 35.62862], [139.71957, 35.62888], [139.71829, 35.62944], [139.71773, 35.62975], [139.71713, 35.63027], [139.71667, 35.63084], [139.71636, 35.63136], [139.71585, 35.63284], [139.71583, 35.63292], [139.71574, 35.63327], [139.71562, 35.63369], [139.71557, 35.63395], [139.71551, 35.63421], [139.71544, 35.63452], [139.7154, 35.63467], [139.71529, 35.63513], [139.71505, 35.6361], [139.71502, 35.63627], [139.71499, 35.63644], [139.71488, 35.637281], [139.714768, 35.637702], [139.714596, 35.638231], [139.713958, 35.639531], [139.71334, 35.64093], [139.71261, 35.64224], [139.7122, 35.64297], [139.71202, 35.64323], [139.7118, 35.64361], [139.71145, 35.64426], [139.7111, 35.6449], [139.71079, 35.64546], [139.71054, 35.64593], [139.710125, 35.64668], [139.70971, 35.64743], [139.70956, 35.6477], [139.70937, 35.64804], [139.7087, 35.64923], [139.70856, 35.64947], [139.70791, 35.65065], [139.70776, 35.65092], [139.70773, 35.65097], [139.70742, 35.65134], [139.70691, 35.65193], [139.70658, 35.65224], [139.70643, 35.65241], [139.70597, 35.65298], [139.70555, 35.65346], [139.70548, 35.65355], [139.70543, 35.6536], [139.70538, 35.65366], [139.70427, 35.6549], [139.70334, 35.65595], [139.70221, 35.65723], [139.70201, 35.65746], [139.70174, 35.65785], [139.701645, 35.658093], [139.70137, 35.6588], [139.70129, 35.65907], [139.70124, 35.6593], [139.70122, 35.65937], [139.70118, 35.65956], [139.70117, 35.65965], [139.70118, 35.65978], [139.70123, 35.66023], [139.70143, 35.66181], [139.70147, 35.66213], [139.7016, 35.66319], [139.70164, 35.66349], [139.70201, 35.6665], [139.70205, 35.66678], [139.70232, 35.66891], [139.70235, 35.66914], [139.70237, 35.66934], [139.70239, 35.66954], [139.70239, 35.66961], [139.7024, 35.66976], [139.70243, 35.6699], [139.70251, 35.67042], [139.70264, 35.6711], [139.702692, 35.671319], [139.70275, 35.67156], [139.70295, 35.6722], [139.70345, 35.67338], [139.70399, 35.67489], [139.70412, 35.67552], [139.70412, 35.67583], [139.70413, 35.67667], [139.70398, 35.67771], [139.70384, 35.67842], [139.70331, 35.68039], [139.70321, 35.68074], [139.70313, 35.68105], [139.70278, 35.68201], [139.70255, 35.68262], [139.70239, 35.68309], [139.70221, 35.683795], [139.70203, 35.6845], [139.70176, 35.6851], [139.70127, 35.68625], [139.70088, 35.68719], [139.70062, 35.68792], [139.70036, 35.68882], [139.70034, 35.6889], [139.70024, 35.68926], [139.70014, 35.690465], [139.70004, 35.69167], [139.70003, 35.69201], [139.70002, 35.69228], [139.69999, 35.69264], [139.69994, 35.69286], [139.69967, 35.69392], [139.69947, 35.6948], [139.6994, 35.69531], [139.69942, 35.69572], [139.69943, 35.69595], [139.69952, 35.69644], [139.69986, 35.69775], [139.69999, 35.69828], [139.70006, 35.6989], [139.70019, 35.70011], [139.700255, 35.70093], [139.70032, 35.70175], [139.70038, 35.70221], [139.70054, 35.70322], [139.70065, 35.70389], [139.70099, 35.70486], [139.70258, 35.70933], [139.7027, 35.70967], [139.70298, 35.71048], [139.70342, 35.71171], [139.703829, 35.712904], [139.70403, 35.71349], [139.70418, 35.71395], [139.70423, 35.7141], [139.70438, 35.71454], [139.70448, 35.71482], [139.70461, 35.71521], [139.70466, 35.71535], [139.70473, 35.71557], [139.70485, 35.7159], [139.70492, 35.7161], [139.70495, 35.71621], [139.70578, 35.71875], [139.70582, 35.71889], [139.70596, 35.71933], [139.70628, 35.72039], [139.7066, 35.72145], [139.7068, 35.72181], [139.70802, 35.72406], [139.70915, 35.72618], [139.710612, 35.728989], [139.711229, 35.73019], [139.711738, 35.731502], [139.71236, 35.73273], [139.71258, 35.73304], [139.71308, 35.73349], [139.7133, 35.73362], [139.71363, 35.73381], [139.71398, 35.73401], [139.7146, 35.73423], [139.71515, 35.73439], [139.7157, 35.7345], [139.71626, 35.73455], [139.71692, 35.73453], [139.71732, 35.7345], [139.71811, 35.73433], [139.71958, 35.73399], [139.72087, 35.73365], [139.72422, 35.73276], [139.72695, 35.73203], [139.72794, 35.731785], [139.72893, 35.73154], [139.72906, 35.73151], [139.72971, 35.73135], [139.72996, 35.73128], [139.7304, 35.73117], [139.73113, 35.731], [139.73173, 35.7309], [139.73229, 35.73087], [139.73296, 35.73088], [139.73372, 35.731], [139.73449, 35.7312], [139.73539, 35.73157], [139.73686, 35.7322], [139.73863, 35.73298], [139.73926, 35.73325], [139.74035, 35.73372], [139.74144, 35.73419], [139.74435, 35.73534], [139.74531, 35.73572], [139.74648, 35.73618], [139.74677, 35.73622], [139.74697, 35.73634], [139.748054, 35.736862], [139.74909, 35.73736], [139.74914, 35.73738], [139.74937, 35.73749], [139.75007, 35.73785], [139.75035, 35.73799], [139.75228, 35.73896], [139.75459, 35.7401], [139.75475, 35.74017], [139.75491, 35.74024], [139.75516, 35.74033], [139.75559, 35.74046], [139.7558, 35.7405], [139.75598, 35.74052], [139.75622, 35.74053], [139.75683, 35.74048], [139.7585, 35.74006], [139.759, 35.73967], [139.75992, 35.7389], [139.76009, 35.73875], [139.76023, 35.73863], [139.76067, 35.73826], [139.761575, 35.737475]] },
	{ name: "東海道線", geo: [[139.766685, 35.680965], [139.76621, 35.67965], [139.76552, 35.6778], [139.76523, 35.67711], [139.76499, 35.67662], [139.76471, 35.67626], [139.76444, 35.67597], [139.76398, 35.6756], [139.76326, 35.67504], [139.76254, 35.67448], [139.76206, 35.6741], [139.7616, 35.67372], [139.76116, 35.67336], [139.76074, 35.67299], [139.76054, 35.67274], [139.76034, 35.67244], [139.75991, 35.67163], [139.7598, 35.67143], [139.75899, 35.66991], [139.75851, 35.66913], [139.75836, 35.66886], [139.75826, 35.66863], [139.7582, 35.66841], [139.75817, 35.66821], [139.75814, 35.6672], [139.7582, 35.66639], [139.75826, 35.66558], [139.75842, 35.66432], [139.7586, 35.66291], [139.7586, 35.66209], [139.75857, 35.66147], [139.75847, 35.66084], [139.75824, 35.65987], [139.75817, 35.65958], [139.75745, 35.65678], [139.75734, 35.65638], [139.75728, 35.65614], [139.757125, 35.65541], [139.75697, 35.65468], [139.75666, 35.65357], [139.75642, 35.6527], [139.75609, 35.65196], [139.75551, 35.65073], [139.75514, 35.65021], [139.7547, 35.64968], [139.75371, 35.64888], [139.75294, 35.64834], [139.75153, 35.64766], [139.74824, 35.64611], [139.747605, 35.64574], [139.74697, 35.64537], [139.74677, 35.64528], [139.74504, 35.64431], [139.74418, 35.64373], [139.74376, 35.64332], [139.74348967, 35.6429081], [139.74330883, 35.64250835], [139.74315654, 35.6421086], [139.74294715, 35.64138525], [139.74276631, 35.64067141], [139.74252836, 35.63983384], [139.74224283, 35.63905337], [139.7419097, 35.63812062], [139.74156706, 35.63739727], [139.74105194, 35.63632753], [139.74064445, 35.63537872], [139.74023697, 35.63442991], [139.73973964, 35.63306665], [139.73937796, 35.6321339], [139.738842, 35.63050437], [139.7386795, 35.629851], [139.738701, 35.629447], [139.738845, 35.628141]] },
	{ name: "総武線", geo: [[139.76503, 35.699605], [139.76634, 35.69926], [139.76755, 35.69883], [139.76823, 35.69875], [139.77186, 35.69844], [139.77194, 35.69844], [139.773215, 35.69832]] }
];

interface Station {
	code: number
	name: string
	pos: {
		h: CanvasTextAlign
		v: CanvasTextBaseline
	}
	geo: Position
}
const stations: Station[] = [
	{ code: 441006, name: "田端", pos: { h: "left", v: "middle" }, geo: [139.761575, 35.737475] },
	{ code: 441021, name: "西日暮里", pos: { h: "left", v: "middle" }, geo: [139.76678, 35.732083] },
	{ code: 441003, name: "上野", pos: { h: "left", v: "middle" }, geo: [139.775855, 35.71322] },
	{ code: 441001, name: "秋葉原", pos: { h: "left", v: "middle" }, geo: [139.773045, 35.698535] },
	{ code: 441005, name: "日暮里", pos: { h: "left", v: "middle" }, geo: [139.770971, 35.72727] },
	{ code: 441002, name: "御徒町", pos: { h: "left", v: "middle" }, geo: [139.774715, 35.707195] },
	{ code: 441004, name: "鶯谷", pos: { h: "left", v: "middle" }, geo: [139.77803, 35.721455] },
	{ code: 440503, name: "水道橋", pos: { h: "center", v: "bottom" }, geo: [139.753745, 35.702] },
	{ code: 440502, name: "御茶ノ水", pos: { h: "center", v: "top" }, geo: [139.76503, 35.699605] },
	{ code: 440501, name: "神田", pos: { h: "left", v: "middle" }, geo: [139.770875, 35.69177] },
	{ code: 440506, name: "四ツ谷", pos: { h: "left", v: "middle" }, geo: [139.73053, 35.685653] },
	{ code: 440505, name: "市ヶ谷", pos: { h: "left", v: "middle" }, geo: [139.73532, 35.691155] },
	{ code: 440507, name: "信濃町", pos: { h: "center", v: "bottom" }, geo: [139.721099, 35.679942] },
	{ code: 440508, name: "千駄ヶ谷", pos: { h: "center", v: "top" }, geo: [139.71153, 35.681196] },
	{ code: 440103, name: "新橋", pos: { h: "left", v: "middle" }, geo: [139.7582, 35.66639] },
	{ code: 440104, name: "浜松町", pos: { h: "left", v: "middle" }, geo: [139.757125, 35.65541] },
	{ code: 440105, name: "田町", pos: { h: "left", v: "middle" }, geo: [139.747605, 35.64574] },
	{ code: 440101, name: "東京", pos: { h: "left", v: "middle" }, geo: [139.766685, 35.680965] },
	{ code: 440102, name: "有楽町", pos: { h: "left", v: "middle" }, geo: [139.76326, 35.67504] },
	{ code: 442232, name: "巣鴨", pos: { h: "center", v: "top" }, geo: [139.74035, 35.73372] },
	{ code: 442233, name: "駒込", pos: { h: "center", v: "top" }, geo: [139.748054, 35.736862] },
	{ code: 442203, name: "池袋", pos: { h: "right", v: "middle" }, geo: [139.711229, 35.73019] },
	{ code: 442205, name: "高田馬場", pos: { h: "right", v: "middle" }, geo: [139.703829, 35.712904] },
	{ code: 442204, name: "目白", pos: { h: "right", v: "middle" }, geo: [139.70628, 35.72039] },
	{ code: 442206, name: "新大久保", pos: { h: "right", v: "middle" }, geo: [139.700255, 35.70093] },
	{ code: 442231, name: "大塚", pos: { h: "center", v: "top" }, geo: [139.72794, 35.731785] },
	{ code: 442213, name: "大崎", pos: { h: "right", v: "middle" }, geo: [139.728245, 35.619945] },
	{ code: 442212, name: "五反田", pos: { h: "right", v: "middle" }, geo: [139.723534, 35.626306] },
	{ code: 440106, name: "品川", pos: { h: "left", v: "middle" }, geo: [139.738845, 35.628141] },
	{ code: 442211, name: "目黒", pos: { h: "right", v: "middle" }, geo: [139.71583, 35.63292] },
	{ code: 442210, name: "恵比寿", pos: { h: "right", v: "middle" }, geo: [139.710125, 35.64668] },
	{ code: 442209, name: "渋谷", pos: { h: "right", v: "middle" }, geo: [139.701645, 35.658093] },
	{ code: 442207, name: "新宿", pos: { h: "right", v: "middle" }, geo: [139.70014, 35.690465] },
	{ code: 440509, name: "代々木", pos: { h: "right", v: "middle" }, geo: [139.70221, 35.683795] },
	{ code: 442208, name: "原宿", pos: { h: "right", v: "middle" }, geo: [139.702692, 35.671319] },
	{ code: 460136, name: "高輪ゲートウェイ", pos: { h: "left", v: "middle" }, geo: [139.74064445, 35.63537872] },
	{ code: 440504, name: "飯田橋", pos: { h: "right", v: "middle" }, geo: [139.7437, 35.70019] },
];

interface Connectors {
	stations: number[]
	d: number
}
const connectors: Connectors[] = [
	{ stations: [440101, 440501], d: 1.3 },// 東京-神田
	{ stations: [440501, 441001], d: 0.7 },// 神田-秋葉原
	{ stations: [441001, 441002], d: 1.0 },// 秋葉原-御徒町
	{ stations: [441002, 441003], d: 0.6 },// 御徒町-上野
	{ stations: [441003, 441004], d: 1.1 },// 上野-鶯谷
	{ stations: [441004, 441005], d: 1.1 },// 鶯谷-日暮里
	{ stations: [441005, 441021], d: 0.5 },// 日暮里-西日暮里
	{ stations: [441021, 441006], d: 0.8 },// 西日暮里-田端
	{ stations: [441006, 442233], d: 1.6 },// 田端-駒込
	{ stations: [442233, 442232], d: 0.7 },// 駒込-巣鴨
	{ stations: [442232, 442231], d: 1.1 },// 巣鴨-大塚
	{ stations: [442231, 442203], d: 1.8 },// 大塚-池袋
	{ stations: [442203, 442204], d: 1.2 },// 池袋-目白
	{ stations: [442204, 442205], d: 0.9 },// 目白-高田馬場
	{ stations: [442205, 442206], d: 1.4 },// 高田馬場-新大久保
	{ stations: [442206, 442207], d: 1.3 },// 新大久保-新宿
	{ stations: [442207, 440509], d: 0.7 },// 新宿-代々木
	{ stations: [440509, 442208], d: 1.5 },// 代々木-原宿
	{ stations: [442208, 442209], d: 1.2 },// 原宿-渋谷
	{ stations: [442209, 442210], d: 1.6 },// 渋谷-恵比寿
	{ stations: [442210, 442211], d: 1.5 },// 恵比寿-目黒
	{ stations: [442211, 442212], d: 1.2 },// 目黒-五反田
	{ stations: [442212, 442213], d: 0.9 },// 五反田-大崎
	{ stations: [442213, 440106], d: 2.0 },// 大崎-品川
	{ stations: [440106, 460136], d: 0.9 },// 品川-高輪ゲートウェイ
	{ stations: [460136, 440105], d: 1.3 },// 高輪ゲートウェイ-田町
	{ stations: [440105, 440104], d: 1.5 },// 田町-浜松町
	{ stations: [440104, 440103], d: 1.2 },// 浜松町-新橋
	{ stations: [440103, 440102], d: 1.1 },// 新橋-有楽町
	{ stations: [440102, 440101], d: 0.8 },// 有楽町-東京
	{ stations: [440501, 440502], d: 1.3 },// 神田-御茶ノ水
	{ stations: [440509, 440508], d: 1.0 },// 代々木-千駄ヶ谷
	{ stations: [440508, 440507], d: 0.7 },// 千駄ヶ谷-信濃町
	{ stations: [440507, 440506], d: 1.3 },// 信濃町-市ヶ谷
	{ stations: [440506, 440505], d: 0.8 },// 市ヶ谷-四ツ谷
	{ stations: [440505, 440504], d: 1.5 },// 四ツ谷-飯田橋
	{ stations: [440504, 440503], d: 0.9 },// 飯田橋-水道橋
	{ stations: [440503, 440502], d: 0.8 },// 水道橋-御茶ノ水
	{ stations: [440502, 441001], d: 0.9 },// 御茶ノ水-秋葉原
];

interface Connection {
	code: number
	d: number
}
const connections: { [key: number]: Connection[] } = {};
connectors.forEach(e => {
	if (!connections[e.stations[0]]) connections[e.stations[0]] = [];
	if (!connections[e.stations[1]]) connections[e.stations[1]] = [];
	if (!connections[e.stations[0]].find(v => v.code === e.stations[1])) connections[e.stations[0]].push({ code: e.stations[1], d: e.d });
	if (!connections[e.stations[1]].find(v => v.code === e.stations[0])) connections[e.stations[1]].push({ code: e.stations[0], d: e.d });
});

const fareByKm = [
	{ d: 3, fareIC: 146 },
	{ d: 6, fareIC: 167 },
	{ d: 10, fareIC: 178 },
	{ d: 15, fareIC: 208 },
	{ d: 20, fareIC: 274 },
];

interface RenderInfo {
	size: number
	padding: number
	fontSize: number
	textColor: string
	lineColor: string
	offset: {
		x: number
		y: number
	}
}

const toFixed = (n: number, d: number) => Math.round(10 ** d * n) / 10 ** d;
const eventList: { code: number, x: number, y: number, w: number, h: number }[] = [];

const renderMap = (canvas: HTMLCanvasElement, info: RenderInfo) => {
	const ctx = canvas.getContext("2d");
	if (!ctx) return;
	for (const line of lines) {
		ctx.beginPath();
		ctx.strokeStyle = info.lineColor;
		ctx.lineWidth = 2;
		ctx.lineCap = "round";
		let moved = false;
		for (const geo of line.geo) {
			const [x, y] = [geo[0] - info.offset.x, -geo[1] + info.offset.y].map(e => e * info.size);
			moved ? ctx.lineTo(x, y) : ctx.moveTo(x, y);
			moved = true;
		}
		ctx.stroke();
		ctx.closePath();
	}
};

const renderStationsMap = (canvas: HTMLCanvasElement, info: RenderInfo) => {
	const ctx = canvas.getContext("2d");
	if (!ctx) return;
	for (const s of stations) {
		let [x, y] = [s.geo[0] - info.offset.x, -s.geo[1] + info.offset.y].map(e => e * info.size);
		ctx.fillStyle = info.textColor;
		ctx.font = info.fontSize + "px 'Hiragino Sans',sans-serif";
		ctx.textBaseline = s.pos.v;
		ctx.textAlign = s.pos.h;
		ctx.fillText(s.name, x + info.padding * (s.pos.h === "left" ? 2.5 : s.pos.h === "right" ? -2.5 : 0), y + info.padding * (s.pos.v === "top" ? 1 : s.pos.v === "bottom" ? -1 : 0));
	}
};

const renderFareMap = (canvas: HTMLCanvasElement, info: RenderInfo, data: { code: number, d: number, fareIC?: number }[]) => {
	const ctx = canvas.getContext("2d");
	if (!ctx) return;
	eventList.length = 0;

	for (const s of stations) {
		let [x, y] = [s.geo[0] - info.offset.x, -s.geo[1] + info.offset.y].map(e => e * info.size);

		const fares = data.find(e => e.code === s.code);
		if (!fares || !fares.fareIC) {
			ctx.beginPath();
			ctx.fillStyle = "red";
			ctx.arc(x, y, 5, 0, Math.PI * 2);
			ctx.fill();
			continue;
		}

		ctx.font = info.fontSize + "px 'Verdana'";
		ctx.textBaseline = "middle";
		ctx.textAlign = "center";
		const preRender = ctx.measureText(fares.fareIC.toString());
		const preRenderHeight = preRender.actualBoundingBoxAscent + preRender.actualBoundingBoxDescent;
		ctx.fillStyle = "#008803";
		ctx.fillRect(x - preRender.width / 2, y - preRenderHeight / 2 - 2.5, preRender.width, preRenderHeight + 2);
		ctx.fillStyle = "#fff";
		ctx.fillText(fares.fareIC.toString(), x, y);
		eventList.push({ code: s.code, x: x - preRender.width / 2, y: y - preRenderHeight / 2 - 2.5, w: preRender.width, h: preRenderHeight + 2 });
	}
};

const calcFare = (code: number) => {
	const result: { code: number, d: number, fareIC?: number }[] = [];
	const stack: { code: number, d: number }[] = [];
	stack.push(...connections[code].map(e => ({ code: e.code, d: e.d })));
	while (stack.length) {
		const v = stack.shift();
		if (!v || v.code === code) continue;
		const f = result.find(e => e.code === v.code);
		if (f) {
			if (v.d < f.d) {
				f.d = v.d;
				stack.push(...connections[v.code].map(e => ({ code: e.code, d: toFixed(e.d + v.d, 1) })));
			}
		} else {
			result.push(v);
			stack.push(...connections[v.code].map(e => ({ code: e.code, d: toFixed(e.d + v.d, 1) })));
		}
	}
	for (const v of result) {
		v.fareIC = fareByKm.find(e => v.d <= e.d)?.fareIC;
	}
	return result;
};

const render = (canvas: HTMLCanvasElement, code: number) => {
	canvas.getContext("2d")?.clearRect(0, 0, canvas.width, canvas.height);

	const width = canvas.width - 0;
	const padding = 10;
	const fontSize = width / 35;

	const minX = lines.reduce((a, b) => Math.min(a, b.geo.reduce((c, d) => Math.min(c, d[0]), 360)), 360);
	const minY = lines.reduce((a, b) => Math.min(a, b.geo.reduce((c, d) => Math.min(c, d[1]), 180)), 180);
	const maxX = lines.reduce((a, b) => Math.max(a, b.geo.reduce((c, d) => Math.max(c, d[0]), 0)), 0);
	const maxY = lines.reduce((a, b) => Math.max(a, b.geo.reduce((c, d) => Math.max(c, d[1]), 0)), 0);
	const size = (width - 2 * padding) / Math.max(maxX - minX, maxY - minY);
	const [offsetX, offsetY] = [minX - (padding + (width - (maxX - minX) * size) / 2) / size, maxY + padding / size];

	const isDarkMode = window.matchMedia("(prefers-color-scheme: dark)").matches;
	const textColor = isDarkMode ? "#ccc" : "#333";
	const lineColor = isDarkMode ? "#fff" : "#000";

	const renderInfo: RenderInfo = { size, padding, fontSize, textColor, lineColor, offset: { x: offsetX, y: offsetY } };

	renderMap(canvas, renderInfo);
	renderStationsMap(canvas, renderInfo);
	renderFareMap(canvas, renderInfo, calcFare(code));
};

const getClickedStation = (e: MouseEvent) => {
	if (!(e.target instanceof HTMLCanvasElement)) return null;
	const canvasRect = e.target.getBoundingClientRect();
	const [x, y] = [e.clientX - canvasRect.left, e.clientY - canvasRect.top];
	const eventStation = eventList.find(v => v.x <= x && x <= v.x + v.w && v.y <= y && y <= v.y + v.h);
	if (!eventStation) return null;
	return eventStation.code;
};
